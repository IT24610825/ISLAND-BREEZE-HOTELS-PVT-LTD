<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Payments - Island Breeze Hotels</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f5f6fa;
        }
        .navbar {
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        .page-header {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin: 30px 0;
        }
        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
        }
        .payment-summary {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
        }
        .payment-item {
            border-left: 4px solid #3498db;
            padding: 20px;
            margin-bottom: 15px;
            background: white;
            border-radius: 10px;
            transition: transform 0.3s ease;
        }
        .payment-item:hover {
            transform: translateX(5px);
        }
        .badge {
            padding: 8px 15px;
            border-radius: 8px;
            font-weight: 500;
        }
        .card-item {
            border: 2px solid #e9ecef;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .card-item:hover {
            border-color: #3498db;
            transform: translateY(-2px);
        }
        .card-item.selected {
            border-color: #3498db;
            background-color: #f8f9ff;
        }
        .card-item.default {
            border-color: #27ae60;
            background-color: #f8fff8;
        }
        .card-number {
            font-family: 'Courier New', monospace;
            font-size: 1.2em;
            font-weight: bold;
            color: #2c3e50;
        }
        .card-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        .hidden {
            display: none !important;
        }
        .form-section {
            display: none;
        }
        .form-section.active {
            display: block;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container">
            <a class="navbar-brand fw-bold" href="#">
                <i class="fas fa-hotel me-2"></i>Island Breeze Hotels
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="guest-dashboard.html">
                            <i class="fas fa-home me-1"></i>Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="guest-payments.html">
                            <i class="fas fa-credit-card me-1"></i>Payments
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="guest-reviews.html">
                            <i class="fas fa-star me-1"></i>Reviews
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="logoutBtn">
                            <i class="fas fa-sign-out-alt me-1"></i>Logout
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container">
        <div class="page-header">
            <h1><i class="fas fa-credit-card me-3"></i>My Payments & Cards</h1>
            <p class="text-muted mb-0">Manage your payment history and saved cards</p>
        </div>

        <!-- Payment Summary -->
        <div class="payment-summary">
            <div class="row">
                <div class="col-md-4 text-center">
                    <h2 class="mb-0" id="totalPaid">$0</h2>
                    <p class="mb-0">Total Paid</p>
                </div>
                <div class="col-md-4 text-center">
                    <h2 class="mb-0" id="pendingAmount">$0</h2>
                    <p class="mb-0">Pending</p>
                </div>
                <div class="col-md-4 text-center">
                    <h2 class="mb-0" id="paymentCount">0</h2>
                    <p class="mb-0">Transactions</p>
                </div>
            </div>
        </div>

        <!-- Tabs -->
        <ul class="nav nav-tabs mb-4" id="paymentTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="payments-tab" data-bs-toggle="tab" data-bs-target="#payments" type="button" role="tab">
                    <i class="fas fa-history me-2"></i>Payment History
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="cards-tab" data-bs-toggle="tab" data-bs-target="#cards" type="button" role="tab">
                    <i class="fas fa-credit-card me-2"></i>Saved Cards
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="make-payment-tab" data-bs-toggle="tab" data-bs-target="#make-payment" type="button" role="tab">
                    <i class="fas fa-plus-circle me-2"></i>Make Payment
                </button>
            </li>
        </ul>

        <!-- Tab Content -->
        <div class="tab-content" id="paymentTabContent">
            <!-- Payment History Tab -->
            <div class="tab-pane fade show active" id="payments" role="tabpanel">
                <div class="card">
                    <div class="card-body">
                        <h3 class="card-title mb-4"><i class="fas fa-history me-2"></i>Payment History</h3>
                        <div id="paymentsContainer">
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Saved Cards Tab -->
            <div class="tab-pane fade" id="cards" role="tabpanel">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h3 class="card-title mb-0"><i class="fas fa-credit-card me-2"></i>Saved Cards</h3>
                            <button class="btn btn-primary" onclick="showAddCardModal()">
                                <i class="fas fa-plus me-2"></i>Add New Card
                            </button>
                        </div>
                        <div id="cardsContainer">
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Make Payment Tab -->
            <div class="tab-pane fade" id="make-payment" role="tabpanel">
                <div class="card">
                    <div class="card-body">
                        <h3 class="card-title mb-4"><i class="fas fa-plus-circle me-2"></i>Make a Payment</h3>
                        <form id="paymentForm">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="bookingId" class="form-label">Booking ID</label>
                                    <input type="text" class="form-control" id="bookingId" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="amount" class="form-label">Amount ($)</label>
                                    <input type="number" step="0.01" class="form-control" id="amount" required>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="paymentMethod" class="form-label">Payment Method</label>
                                    <select class="form-select" id="paymentMethod" required onchange="togglePaymentFields()">
                                        <option value="">Select Method</option>
                                        <option value="SAVED_CARD">Use Saved Card</option>
                                        <option value="NEW_CARD">New Card</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Saved Card Selection -->
                            <div id="savedCardSection" class="form-section">
                                <div class="mb-3">
                                    <label class="form-label">Select Card</label>
                                    <div id="savedCardsForPayment">
                                        <!-- Cards will be loaded here -->
                                    </div>
                                </div>
                            </div>

                            <!-- New Card Details -->
                            <div id="newCardSection" class="form-section">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="newCardNumber" class="form-label">Card Number</label>
                                        <input type="text" class="form-control" id="newCardNumber" placeholder="1234 5678 9012" 
                                               pattern="[\d\s]{12,15}" 
                                               title="Please enter a valid 12-digit card number"
                                               oninput="formatCardNumber(this)"
                                               onkeypress="return isNumberKey(event)">
                                        <div class="invalid-feedback" id="cardNumberError">
                                            Please enter a valid 12-digit card number
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="cardHolderName" class="form-label">Card Holder Name</label>
                                        <input type="text" class="form-control" id="cardHolderName" name="cardHolderName" required>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="cvv" class="form-label">CVV</label>
                                        <input type="text" class="form-control" id="cvv" placeholder="123" 
                                               pattern="\d{3}" 
                                               title="Please enter a valid 3-digit CVV"
                                               maxlength="3"
                                               onkeypress="return isNumberKey(event)">
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="expiryDate" class="form-label">Expiry Date</label>
                                        <input type="text" class="form-control" id="expiryDate" placeholder="MM/YY" 
                                               pattern="(0[1-9]|1[0-2])\/\d{2}" 
                                               title="Please enter expiry date in MM/YY format"
                                               oninput="formatExpiryDate(this)">
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="cardType" class="form-label">Card Type</label>
                                        <select class="form-select" id="cardType">
                                            <option value="CREDIT">Credit Card</option>
                                            <option value="DEBIT">Debit Card</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="saveCard">
                                        <label class="form-check-label" for="saveCard">
                                            Save this card for future payments
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <button type="submit" class="btn btn-primary btn-lg">
                                <i class="fas fa-lock me-2"></i>Make Secure Payment
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Card Modal -->
    <div class="modal fade" id="cardModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cardModalTitle">Add New Card</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="cardForm">
                        <input type="hidden" id="editCardId">
                        <div class="mb-3">
                            <label for="modalCardNumber" class="form-label">Card Number</label>
                            <input type="text" class="form-control" id="modalCardNumber" placeholder="1234 5678 9012" 
                                   pattern="[\d\s]{12,15}" 
                                   title="Please enter a valid 12-digit card number"
                                   oninput="formatCardNumber(this)"
                                   onkeypress="return isNumberKey(event)" required>
                            <div class="invalid-feedback" id="modalCardNumberError">
                                Please enter a valid 12-digit card number
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="modalCardHolderName" class="form-label">Card Holder Name</label>
                            <input type="text" class="form-control" id="modalCardHolderName" required>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="modalCvv" class="form-label">CVV</label>
                                <input type="text" class="form-control" id="modalCvv" placeholder="123" 
                                       pattern="\d{3}" 
                                       title="Please enter a valid 3-digit CVV"
                                       maxlength="3"
                                       onkeypress="return isNumberKey(event)" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="modalExpiryDate" class="form-label">Expiry Date</label>
                                <input type="text" class="form-control" id="modalExpiryDate" placeholder="MM/YY" 
                                       pattern="(0[1-9]|1[0-2])\/\d{2}" 
                                       title="Please enter expiry date in MM/YY format"
                                       oninput="formatExpiryDate(this)" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="modalCardType" class="form-label">Card Type</label>
                            <select class="form-select" id="modalCardType" required>
                                <option value="CREDIT">Credit Card</option>
                                <option value="DEBIT">Debit Card</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="modalIsDefault">
                                <label class="form-check-label" for="modalIsDefault">
                                    Set as default card
                                </label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveCard()">Save Card</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Guest info and token will be loaded from localStorage when needed
        let savedCards = [];
        let selectedCardId = null;

        if (!guestToken) {
            window.location.href = 'index.html';
        }

        document.getElementById('logoutBtn').addEventListener('click', function(e) {
            e.preventDefault();
            localStorage.removeItem('guestToken');
            localStorage.removeItem('guestInfo');
            window.location.href = 'index.html';
        });

        // Format card number with spaces after every 4 digits
        function formatCardNumber(input) {
            let value = input.value.replace(/\D/g, '');
            
            if (value.length > 12) {
                value = value.substring(0, 12);
            }
            
            let formattedValue = '';
            for (let i = 0; i < value.length; i++) {
                if (i > 0 && i % 4 === 0) {
                    formattedValue += ' ';
                }
                formattedValue += value[i];
            }
            
            input.value = formattedValue;
            
            const cardNumber = value;
            const errorElement = input.nextElementSibling;
            
            if (cardNumber.length > 0 && cardNumber.length < 12) {
                input.classList.add('is-invalid');
                if (errorElement) errorElement.style.display = 'block';
            } else if (cardNumber.length === 12) {
                input.classList.remove('is-invalid');
                input.classList.add('is-valid');
                if (errorElement) errorElement.style.display = 'none';
            } else {
                input.classList.remove('is-valid', 'is-invalid');
                if (errorElement) errorElement.style.display = 'none';
            }
        }

        // Format expiry date as MM/YY
        function formatExpiryDate(input) {
            let value = input.value.replace(/\D/g, '');
            
            if (value.length >= 2) {
                value = value.substring(0, 2) + '/' + value.substring(2, 4);
            }
            
            input.value = value;
        }
        
        // Allow only numbers
        function isNumberKey(evt) {
            const charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode > 31 && (charCode < 48 || charCode > 57)) {
                return false;
            }
            return true;
        }

        function togglePaymentFields() {
            const paymentMethod = document.getElementById('paymentMethod').value;
            const savedCardSection = document.getElementById('savedCardSection');
            const newCardSection = document.getElementById('newCardSection');
            
            savedCardSection.classList.remove('active');
            newCardSection.classList.remove('active');
            
            if (paymentMethod === 'SAVED_CARD') {
                savedCardSection.classList.add('active');
                loadSavedCardsForPayment();
            } else if (paymentMethod === 'NEW_CARD') {
                newCardSection.classList.add('active');
            }
        }

        async function fetchPayments() {
            try {
                const response = await fetch(`/api/payments/guest/${guestInfo.id}`);
                if (response.ok) {
                    const payments = await response.json();
                    displayPayments(payments);
                    updateSummary(payments);
                } else {
                    throw new Error('Failed to fetch payments');
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('paymentsContainer').innerHTML = 
                    '<div class="text-center text-danger">Failed to load payments</div>';
            }
        }

        async function fetchCards() {
            try {
                const response = await fetch(`/api/cards/user/${guestInfo.id}`);
                if (response.ok) {
                    savedCards = await response.json();
                    displayCards(savedCards);
                } else {
                    throw new Error('Failed to fetch cards');
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('cardsContainer').innerHTML = 
                    '<div class="text-center text-danger">Failed to load cards</div>';
            }
        }

        function displayPayments(payments) {
            const container = document.getElementById('paymentsContainer');
            if (payments.length === 0) {
                container.innerHTML = '<div class="text-center text-muted py-4">No payments found</div>';
                return;
            }

            container.innerHTML = payments.map(payment => `
                <div class="payment-item">
                    <div class="row align-items-center">
                        <div class="col-md-2">
                            <div class="text-center">
                                <i class="fas fa-receipt fa-2x text-primary"></i>
                                <div class="mt-2"><strong>#${payment.paymentId || payment.id}</strong></div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div><strong>Booking ID:</strong> ${payment.bookingId}</div>
                            <div class="text-muted">${formatDate(payment.paymentDate)}</div>
                        </div>
                        <div class="col-md-2">
                            <div><strong>Method:</strong></div>
                            <div>${payment.paymentMethod}</div>
                        </div>
                        <div class="col-md-2">
                            <div><strong>Amount:</strong></div>
                            <div class="h5 mb-0 text-primary">$${payment.amount}</div>
                        </div>
                        <div class="col-md-3 text-end">
                            <span class="badge bg-${getStatusColor(payment.status)}">${payment.status}</span>
                            <button class="btn btn-sm btn-outline-primary ms-2" onclick='downloadReceipt(${JSON.stringify(payment)})'>
                                <i class="fas fa-download"></i> Receipt
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function displayCards(cards) {
            const container = document.getElementById('cardsContainer');
            if (cards.length === 0) {
                container.innerHTML = '<div class="text-center text-muted py-4">No saved cards found</div>';
                return;
            }

            container.innerHTML = cards.map(card => `
                <div class="card-item ${card.default ? 'default' : ''}">
                    <div class="row align-items-center">
                        <div class="col-md-2">
                            <i class="fas fa-credit-card fa-3x text-primary"></i>
                        </div>
                        <div class="col-md-6">
                            <div class="card-number">${card.cardNumber}</div>
                            <div class="text-muted">${card.cardHolderName}</div>
                            <div class="small text-muted">${card.cardType} • Expires ${card.expiryDate}</div>
                            ${card.default ? '<span class="badge bg-success mt-2">Default Card</span>' : ''}
                        </div>
                        <div class="col-md-4">
                            <div class="card-actions">
                                <button class="btn btn-sm btn-outline-primary" onclick="editCard('${card.cardId}')">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                ${!card.default ? `<button class="btn btn-sm btn-outline-success" onclick="setDefaultCard('${card.cardId}')">
                                    <i class="fas fa-star"></i> Set Default
                                </button>` : ''}
                                <button class="btn btn-sm btn-outline-danger" onclick="deleteCard('${card.cardId}')">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function loadSavedCardsForPayment() {
            const container = document.getElementById('savedCardsForPayment');
            if (savedCards.length === 0) {
                container.innerHTML = '<div class="text-center text-muted py-3">No saved cards available</div>';
                return;
            }

            container.innerHTML = savedCards.map(card => `
                <div class="card-item ${card.default ? 'selected' : ''}" onclick="selectCard('${card.cardId}')">
                    <div class="row align-items-center">
                        <div class="col-md-2">
                            <i class="fas fa-credit-card fa-2x text-primary"></i>
                        </div>
                        <div class="col-md-8">
                            <div class="card-number">${card.cardNumber}</div>
                            <div class="text-muted">${card.cardHolderName}</div>
                            <div class="small text-muted">${card.cardType} • Expires ${card.expiryDate}</div>
                            ${card.default ? '<span class="badge bg-success mt-1">Default</span>' : ''}
                        </div>
                        <div class="col-md-2">
                            <i class="fas fa-check-circle text-success" style="display: ${card.default ? 'block' : 'none'}"></i>
                        </div>
                    </div>
                </div>
            `).join('');

            if (savedCards.find(c => c.default)) {
                selectedCardId = savedCards.find(c => c.default).cardId;
            }
        }

        function selectCard(cardId) {
            selectedCardId = cardId;
            document.querySelectorAll('#savedCardsForPayment .card-item').forEach(item => {
                item.classList.remove('selected');
            });
            event.currentTarget.classList.add('selected');
            
            // Update check icons
            document.querySelectorAll('#savedCardsForPayment .fa-check-circle').forEach(icon => {
                icon.style.display = 'none';
            });
            event.currentTarget.querySelector('.fa-check-circle').style.display = 'block';
        }

        function showAddCardModal() {
            document.getElementById('cardModalTitle').textContent = 'Add New Card';
            document.getElementById('cardForm').reset();
            document.getElementById('editCardId').value = '';
            document.getElementById('modalCardNumber').disabled = false;
            new bootstrap.Modal(document.getElementById('cardModal')).show();
        }

        function editCard(cardId) {
            const card = savedCards.find(c => c.cardId === cardId);
            if (!card) return;

            document.getElementById('cardModalTitle').textContent = 'Edit Card';
            document.getElementById('editCardId').value = cardId;
            document.getElementById('modalCardNumber').value = card.cardNumber;
            document.getElementById('modalCardNumber').disabled = true;
            document.getElementById('modalCardHolderName').value = card.cardHolderName;
            document.getElementById('modalCvv').value = '';
            document.getElementById('modalExpiryDate').value = card.expiryDate;
            document.getElementById('modalCardType').value = card.cardType;
            document.getElementById('modalIsDefault').checked = card.default;
            
            new bootstrap.Modal(document.getElementById('cardModal')).show();
        }

        async function saveCard() {
            const form = document.getElementById('cardForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const cardId = document.getElementById('editCardId').value;
            const isEdit = !!cardId;

            const cardData = {
                cardNumber: document.getElementById('modalCardNumber').value.replace(/\s/g, ''),
                cardHolderName: document.getElementById('modalCardHolderName').value,
                cvv: document.getElementById('modalCvv').value,
                expiryDate: document.getElementById('modalExpiryDate').value,
                cardType: document.getElementById('modalCardType').value,
                isDefault: document.getElementById('modalIsDefault').checked
            };

            try {
                const url = isEdit 
                    ? `/api/cards/${cardId}/user/${guestInfo.id}`
                    : `/api/cards/user/${guestInfo.id}`;
                const method = isEdit ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${guestToken}`
                    },
                    body: JSON.stringify(cardData)
                });

                if (response.ok) {
                    bootstrap.Modal.getInstance(document.getElementById('cardModal')).hide();
                    await fetchCards();
                    alert(isEdit ? 'Card updated successfully!' : 'Card added successfully!');
                } else {
                    const error = await response.text();
                    alert('Failed to save card: ' + error);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while saving the card.');
            }
        }

        async function deleteCard(cardId) {
            if (!confirm('Are you sure you want to delete this card?')) return;

            try {
                const response = await fetch(`/api/cards/${cardId}/user/${guestInfo.id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${guestToken}`
                    }
                });

                if (response.ok) {
                    await fetchCards();
                    alert('Card deleted successfully!');
                } else {
                    const error = await response.text();
                    alert('Failed to delete card: ' + error);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while deleting the card.');
            }
        }

        async function setDefaultCard(cardId) {
            try {
                const response = await fetch(`/api/cards/${cardId}/user/${guestInfo.id}/default`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${guestToken}`
                    }
                });

                if (response.ok) {
                    await fetchCards();
                    alert('Default card updated successfully!');
                } else {
                    const error = await response.text();
                    alert('Failed to set default card: ' + error);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while setting the default card.');
            }
        }

        function updateSummary(payments) {
            const totalPaid = payments
                .filter(p => p.status === 'Completed' || p.status === 'PAID')
                .reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);
            
            const pending = payments
                .filter(p => p.status === 'Pending' || p.status === 'PENDING')
                .reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);

            document.getElementById('totalPaid').textContent = `$${totalPaid.toLocaleString()}`;
            document.getElementById('pendingAmount').textContent = `$${pending.toLocaleString()}`;
            document.getElementById('paymentCount').textContent = payments.length;
        }

        function getStatusColor(status) {
            const colors = {
                'Pending': 'warning',
                'PENDING': 'warning',
                'Completed': 'success',
                'PAID': 'success',
                'Failed': 'danger',
                'Refunded': 'info'
            };
            return colors[status] || 'secondary';
        }

        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
        }

        function downloadReceipt(payment) {
            const receiptHTML = `
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    <title>Payment Receipt</title>
                    <style>
                        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                        .receipt-header { text-align: center; border-bottom: 3px solid #3498db; padding-bottom: 20px; margin-bottom: 30px; }
                        .receipt-header h1 { color: #2c3e50; margin: 0; }
                        .info-row { display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #ecf0f1; }
                        .info-label { font-weight: bold; color: #7f8c8d; }
                        .info-value { color: #2c3e50; }
                        .total-section { background: #ecf0f1; padding: 20px; border-radius: 10px; margin-top: 30px; }
                        .total-amount { font-size: 24px; font-weight: bold; color: #27ae60; text-align: right; }
                        .receipt-footer { text-align: center; margin-top: 50px; padding-top: 20px; border-top: 2px solid #ecf0f1; color: #7f8c8d; }
                    </style>
                </head>
                <body>
                    <div class="receipt-header">
                        <h1>🏨 Island Breeze Hotels</h1>
                        <p>Payment Receipt</p>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Receipt Number:</span>
                        <span class="info-value">#${payment.paymentId || payment.id}</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Guest Name:</span>
                        <span class="info-value">${guestInfo.fullName || guestInfo.name}</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Booking ID:</span>
                        <span class="info-value">${payment.bookingId}</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Payment Date:</span>
                        <span class="info-value">${formatDate(payment.paymentDate)}</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Payment Method:</span>
                        <span class="info-value">${payment.paymentMethod}</span>
                    </div>
                    <div class="total-section">
                        <div class="info-row" style="border: none;">
                            <span class="info-label" style="font-size: 18px;">Total Amount Paid:</span>
                            <span class="total-amount">$${payment.amount}</span>
                        </div>
                    </div>
                    <div class="receipt-footer">
                        <p><strong>Thank you for your payment!</strong></p>
                        <p>Island Breeze Hotels (Pvt) Ltd<br>123 Galle Road, Colombo, 12345<br>Phone: +94 77 000 7777</p>
                    </div>
                </body>
                </html>
            `;
            
            const printWindow = window.open('', '_blank');
            printWindow.document.write(receiptHTML);
            printWindow.document.close();
            printWindow.onload = function() {
                printWindow.print();
            };
        }

        let isSubmitting = false; // Prevent duplicate submissions
        const guestInfo = JSON.parse(localStorage.getItem('currentUser') || '{}');
        
        // Check if user is logged in
        function checkLoggedIn() {
            if (!guestInfo || !guestInfo.id) {
                alert('Please log in to make a payment');
                window.location.href = 'index.html';
                return false;
            }
            return true;
        }
        
        // Only proceed if user is logged in
        if (!checkLoggedIn()) return;
        
        // Toggle payment fields based on payment method
        window.togglePaymentFields = function() {
            try {
                const paymentMethod = document.getElementById('paymentMethod')?.value;
                const newCardSection = document.getElementById('newCardSection');
                const savedCardsSection = document.getElementById('savedCardsSection');
                
                if (!newCardSection) return;
                
                if (paymentMethod === 'NEW_CARD') {
                    newCardSection.style.display = 'block';
                    if (savedCardsSection) savedCardsSection.style.display = 'none';
                } else if (paymentMethod === 'SAVED_CARD') {
                    if (savedCardsSection) savedCardsSection.style.display = 'block';
                    newCardSection.style.display = 'none';
                } else {
                    newCardSection.style.display = 'none';
                    if (savedCardsSection) savedCardsSection.style.display = 'none';
                }
            } catch (error) {
                console.error('Error in togglePaymentFields:', error);
            }
        };
        
        // Show add card modal
        window.showAddCardModal = function() {
            try {
                const modal = new bootstrap.Modal(document.getElementById('cardModal'));
                modal.show();
            } catch (error) {
                console.error('Error showing add card modal:', error);
            }
        };

        // Initialize payment method toggle and form validation
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize payment method toggle
            const paymentMethodSelect = document.getElementById('paymentMethod');
            if (paymentMethodSelect) {
                paymentMethodSelect.addEventListener('change', togglePaymentFields);
                togglePaymentFields(); // Initialize on page load
            }
            
            // Initialize form validation
            const forms = document.querySelectorAll('.needs-validation');
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', function(event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
            
            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function(tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        // Move the payment form handler inside DOMContentLoaded
        document.addEventListener('DOMContentLoaded', function() {
            const paymentForm = document.getElementById('paymentForm');
            if (!paymentForm) return;
            
            paymentForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (isSubmitting) {
                return; // Prevent duplicate submissions
            }
            isSubmitting = true;
            
            const submitButton = this.querySelector('button[type="submit"]');
            if (submitButton) {
                submitButton.disabled = true;
                submitButton.textContent = 'Processing...';
            }
            
            const paymentMethod = document.getElementById('paymentMethod').value;
            const bookingId = document.getElementById('bookingId').value;
            const amount = parseFloat(document.getElementById('amount').value);
            
            if (!bookingId) {
                alert('Please enter a valid booking ID');
                resetSubmitButton(submitButton);
                isSubmitting = false;
                return;
            }
            
            if (!amount || amount <= 0) {
                alert('Please enter a valid amount');
                resetSubmitButton(submitButton);
                isSubmitting = false;
                return;
            }
            
            let paymentData = {
                guestId: guestInfo.guestId || guestInfo.id,
                bookingId: bookingId,
                amount: amount,
                status: 'PENDING', // Start with PENDING, will be updated to PAID on success
                paymentDate: new Date().toISOString(),
                paymentMethod: paymentMethod
            };

            if (paymentMethod === 'SAVED_CARD') {
                if (!selectedCardId) {
                    alert('Please select a card');
                    isSubmitting = false;
                    if (submitButton) {
                        submitButton.disabled = false;
                        submitButton.textContent = 'Process Payment';
                    }
                    return;
                }
                const selectedCard = savedCards.find(c => c.cardId === selectedCardId);
                paymentData.paymentMethod = `${selectedCard.cardType} Card (${selectedCard.cardNumber})`;
            } else if (paymentMethod === 'NEW_CARD') {
                const cardNumber = document.getElementById('newCardNumber').value.replace(/\s/g, '');
                const cardHolderName = document.getElementById('cardHolderName').value;
                const cvv = document.getElementById('cvv').value;
                const expiryDate = document.getElementById('expiryDate').value;
                const cardType = document.getElementById('cardType').value;
                const saveCard = document.getElementById('saveCard').checked;

                if (!cardNumber || cardNumber.length !== 12) {
                    alert('Please enter a valid 12-digit card number');
                    isSubmitting = false;
                    if (submitButton) {
                        submitButton.disabled = false;
                        submitButton.textContent = 'Process Payment';
                    }
                    return;
                }
                if (!cvv || cvv.length !== 3) {
                    alert('Please enter a valid 3-digit CVV');
                    isSubmitting = false;
                    if (submitButton) {
                        submitButton.disabled = false;
                        submitButton.textContent = 'Process Payment';
                    }
                    return;
                }
                if (!expiryDate.match(/^(0[1-9]|1[0-2])\/\d{2}$/)) {
                    alert('Please enter a valid expiry date in MM/YY format');
                    isSubmitting = false;
                    if (submitButton) {
                        submitButton.disabled = false;
                        submitButton.textContent = 'Process Payment';
                    }
                    return;
                }

                paymentData.paymentMethod = `${cardType} Card (****${cardNumber.slice(-4)})`;

                // Save card if requested
                if (saveCard) {
                    try {
                        await fetch(`/api/cards/user/${guestInfo.id}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${guestToken}`
                            },
                            body: JSON.stringify({
                                cardNumber: cardNumber,
                                cardHolderName: cardHolderName,
                                cvv: cvv,
                                expiryDate: expiryDate,
                                cardType: cardType,
                                isDefault: savedCards.length === 0
                            })
                        });
                        await fetchCards();
                    } catch (error) {
                        console.error('Error saving card:', error);
                    }
                }
            }

            try {
                // Create and process payment in one step
                const response = await fetch('http://localhost:8080/api/payments/process', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        ...paymentData,
                        paymentMethod: paymentMethod,
                        transactionId: 'TXN' + Date.now() // Generate a unique transaction ID
                    })
                });

                if (!response.ok) {
                    const error = await response.text();
                    throw new Error(error || 'Payment processing failed');
                }

                const result = await response.json();
                
                if (result.status === 'PAID') {
                    // Update the booking status to CONFIRMED
                    const updateBookingResponse = await fetch(`http://localhost:8080/api/bookings/${bookingId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            status: 'CONFIRMED',
                            paymentStatus: 'PAID'
                        })
                    });

                    if (!updateBookingResponse.ok) {
                        console.warn('Payment succeeded but failed to update booking status');
                    }

                    alert('Payment successful! Your booking is now confirmed.');
                    
                    // Refresh the payments list
                    await fetchPayments();
                    
                    // Reset the form
                    this.reset();
                    selectedCardId = null;
                    document.getElementById('paymentMethod').value = '';
                    togglePaymentFields();
                    
                    // Update the summary
                    updateSummary(await fetchPayments());
                    
                    // Redirect to bookings page after a short delay
                    setTimeout(() => {
                        window.location.href = 'guest-bookings.html';
                    }, 2000);
                } else {
                    throw new Error('Payment processing failed');
                }
            } catch (error) {
                console.error('Payment Error:', error);
                alert(`Payment failed: ${error.message || 'Please try again'}`);
            } finally {
                // Reset submission state
                isSubmitting = false;
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.textContent = 'Make Secure Payment';
                }
            }
        });

        // Helper function to reset submit button
        function resetSubmitButton(button) {
            if (button) {
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-lock me-2"></i>Make Secure Payment';
            }
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            fetchPayments();
            fetchCards();
            loadPendingPayments();
            
            // Set up form validation
            const form = document.getElementById('paymentForm');
            if (form) {
                form.addEventListener('submit', function(e) {
                    if (!form.checkValidity()) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                    form.classList.add('was-validated');
                });
            }
        });
        
        // Load any pending payments for the current guest
        async function loadPendingPayments() {
            try {
                const response = await fetch(`http://localhost:8080/api/payments/guest/${guestInfo.guestId || guestInfo.id}?status=PENDING`);
                if (response.ok) {
                    const payments = await response.json();
                    if (payments && payments.length > 0) {
                        // Auto-fill the first pending payment
                        const payment = payments[0];
                        document.getElementById('bookingId').value = payment.bookingId || '';
                        document.getElementById('amount').value = payment.amount || '';
                    }
                }
            } catch (error) {
                console.error('Error loading pending payments:', error);
            }
        }
        
        // Load pending payments when the page loads
        loadPendingPayments();

        // Tab change event
        document.querySelectorAll('[data-bs-toggle="tab"]').forEach(tab => {
            tab.addEventListener('shown.bs.tab', function (e) {
                if (e.target.id === 'cards-tab') {
                    fetchCards();
                }
            });
        });
    </script>
</body>
</html>
